# Reference: http://www.iana.org/assignments/ipfix/ipfix.xhtml
# Reference: http://www.iana.org/assignments/enterprise-numbers/enterprise-numbers
# Reference: http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html

import struct

IPFIX_VERSION = 0x000a

VARIABLE_LENGTH = 65535

class TypeBasicList(object):
    def __init__(self):
        self.format = 'BasicList'
        self.size = VARIABLE_LENGTH

class TypeSubTemplateList(object):
    def __init__(self):
        self.format = 'SubTemplateList'
        self.size = VARIABLE_LENGTH

type_to_struct = {
    'octetArray'          : {'symbolFormat':'B'}, # should be composed multiplying the format by the field length
    'unsigned8'           : struct.Struct('!B'),
    'unsigned16'          : struct.Struct('!H'),
    'unsigned32'          : struct.Struct('!I'),
    'unsigned64'          : struct.Struct('!Q'),
    'signed8'             : struct.Struct('!b'),
    'signed16'            : struct.Struct('!h'),
    'signed32'            : struct.Struct('!i'),
    'signed64'            : struct.Struct('!q'),
    'float32'             : struct.Struct('!f'),
    'float64'             : struct.Struct('!d'),
    'boolean'             : struct.Struct('!?'),
    'macAddress'          : struct.Struct('!BBBBBB'),
    'string'              : {'symbolFormat':'c'}, # should be composed multiplying the format by the field length
    'dateTimeSeconds'     : None, # To Be Defined
    'dateTimeMilliseconds': None, # To Be Defined
    'dateTimeMicroseconds': None, # To Be Defined
    'dateTimeNanoseconds' : None, # To Be Defined
    'ipv4Address'         : struct.Struct('!BBBB'),
    'ipv6Address'         : struct.Struct('!BBBBBBBBBBBBBBBB'),
    'basicList'           : TypeBasicList(),
    'subTemplateList'     : TypeSubTemplateList(),
    'subTemplateMultiList': None, # To Be Defined
}

reduced_types = {
    'unsigned16': { 1: 'unsigned8' },
    'unsigned32': { 2: 'unsigned16', 1: 'unsigned8' },
    'unsigned64': { 4: 'unsigned32', 2: 'unsigned16', 1: 'unsigned8' },
    'signed16'  : { 1: 'signed8' },
    'signed32'  : { 2: 'signed16', 1: 'signed8' },
    'signed64'  : { 4: 'signed32', 2: 'signed16', 1: 'signed8' },
    'float64'   : { 4: 'float32' }
}

ie_iana = {
      1: { 'name': 'octetDeltaCount',                       'type': 'unsigned64'            },
      2: { 'name': 'packetDeltaCount',                      'type': 'unsigned64'            },
      3: { 'name': 'deltaFlowCount',                        'type': 'unsigned64'            },
      4: { 'name': 'protocolIdentifier',                    'type': 'unsigned8'             },
      5: { 'name': 'ipClassOfService',                      'type': 'unsigned8'             },
      6: { 'name': 'tcpControlBits',                        'type': 'unsigned16'            },
      7: { 'name': 'sourceTransportPort',                   'type': 'unsigned16'            },
      8: { 'name': 'sourceIPv4Address',                     'type': 'ipv4Address'           },
      9: { 'name': 'sourceIPv4PrefixLength',                'type': 'unsigned8',  'minValue': 0, 'maxValue': 32 },
     10: { 'name': 'ingressInterface',                      'type': 'unsigned32'            },
     11: { 'name': 'destinationTransportPort',              'type': 'unsigned16'            },
     12: { 'name': 'destinationIPv4Address',                'type': 'ipv4Address'           },
     13: { 'name': 'destinationIPv4PrefixLength',           'type': 'unsigned8',  'minValue': 0, 'maxValue': 32 },
     14: { 'name': 'egressInterface',                       'type': 'unsigned32'            },
     15: { 'name': 'ipNextHopIPv4Address',                  'type': 'ipv4Address'           },
     16: { 'name': 'bgpSourceAsNumber',                     'type': 'unsigned32'            },
     17: { 'name': 'bgpDestinationAsNumber',                'type': 'unsigned32'            },
     18: { 'name': 'bgpNextHopIPv4Address',                 'type': 'ipv4Address'           },
     19: { 'name': 'postMCastPacketDeltaCount',             'type': 'unsigned64'            },
     20: { 'name': 'postMCastOctetDeltaCount',              'type': 'unsigned64'            },
     21: { 'name': 'flowEndSysUpTime',                      'type': 'unsigned32'            },
     22: { 'name': 'flowStartSysUpTime',                    'type': 'unsigned32'            },
     23: { 'name': 'postOctetDeltaCount',                   'type': 'unsigned64'            },
     24: { 'name': 'postPacketDeltaCount',                  'type': 'unsigned64'            },
     25: { 'name': 'minimumIpTotalLength',                  'type': 'unsigned64'            },
     26: { 'name': 'maximumIpTotalLength',                  'type': 'unsigned64'            },
     27: { 'name': 'sourceIPv6Address',                     'type': 'ipv6Address'           },
     28: { 'name': 'destinationIPv6Address',                'type': 'ipv6Address'           },
     29: { 'name': 'sourceIPv6PrefixLength',                'type': 'unsigned8',  'minValue': 0, 'maxValue': 128 },
     30: { 'name': 'destinationIPv6PrefixLength',           'type': 'unsigned8',  'minValue': 0, 'maxValue': 128 },
     31: { 'name': 'flowLabelIPv6',                         'type': 'unsigned32', 'minValue': 0, 'maxValue': 0xFFFFF },
     32: { 'name': 'icmpTypeCodeIPv4',                      'type': 'unsigned16'            },
     33: { 'name': 'igmpType',                              'type': 'unsigned8'             },
     36: { 'name': 'flowActiveTimeout',                     'type': 'unsigned16'            },
     37: { 'name': 'flowIdleTimeout',                       'type': 'unsigned16'            },
     40: { 'name': 'exportedOctetTotalCount',               'type': 'unsigned64'            },
     41: { 'name': 'exportedMessageTotalCount',             'type': 'unsigned64'            },
     42: { 'name': 'exportedFlowRecordTotalCount',          'type': 'unsigned64'            },
     44: { 'name': 'sourceIPv4Prefix',                      'type': 'ipv4Address'           },
     45: { 'name': 'destinationIPv4Prefix',                 'type': 'ipv4Address'           },
     46: { 'name': 'mplsTopLabelType',                      'type': 'unsigned8'             },
     47: { 'name': 'mplsTopLabelIPv4Address',               'type': 'ipv4Address'           },
     52: { 'name': 'minimumTTL',                            'type': 'unsigned8'             },
     53: { 'name': 'maximumTTL',                            'type': 'unsigned8'             },
     54: { 'name': 'fragmentIdentification',                'type': 'unsigned32'            },
     55: { 'name': 'postIpClassOfService',                  'type': 'unsigned8'             },
     56: { 'name': 'sourceMacAddress',                      'type': 'macAddress'            },
     57: { 'name': 'postDestinationMacAddress',             'type': 'macAddress'            },
     58: { 'name': 'vlanId',                                'type': 'unsigned16'            },
     59: { 'name': 'postVlanId',                            'type': 'unsigned16'            },
     60: { 'name': 'ipVersion',                             'type': 'unsigned8'             },
     61: { 'name': 'flowDirection',                         'type': 'unsigned8'             },
     62: { 'name': 'ipNextHopIPv6Address',                  'type': 'ipv6Address'           },
     63: { 'name': 'bgpNextHopIPv6Address',                 'type': 'ipv6Address'           },
     64: { 'name': 'ipv6ExtensionHeaders',                  'type': 'unsigned32'            },
     70: { 'name': 'mplsTopLabelStackSection',              'type': 'octetArray'            },
     71: { 'name': 'mplsLabelStackSection2',                'type': 'octetArray'            },
     72: { 'name': 'mplsLabelStackSection3',                'type': 'octetArray'            },
     73: { 'name': 'mplsLabelStackSection4',                'type': 'octetArray'            },
     74: { 'name': 'mplsLabelStackSection5',                'type': 'octetArray'            },
     75: { 'name': 'mplsLabelStackSection6',                'type': 'octetArray'            },
     76: { 'name': 'mplsLabelStackSection7',                'type': 'octetArray'            },
     77: { 'name': 'mplsLabelStackSection8',                'type': 'octetArray'            },
     78: { 'name': 'mplsLabelStackSection9',                'type': 'octetArray'            },
     79: { 'name': 'mplsLabelStackSection10',               'type': 'octetArray'            },
     80: { 'name': 'destinationMacAddress',                 'type': 'macAddress'            },
     81: { 'name': 'postSourceMacAddress',                  'type': 'macAddress'            },
     82: { 'name': 'interfaceName',                         'type': 'string'                },
     83: { 'name': 'interfaceDescription',                  'type': 'string'                },
     85: { 'name': 'octetTotalCount',                       'type': 'unsigned64'            },
     86: { 'name': 'packetTotalCount',                      'type': 'unsigned64'            },
     88: { 'name': 'fragmentOffset',                        'type': 'unsigned16', 'minValue': 0, 'maxValue': 0x1FFF },
     89: { 'name': 'forwardingStatus',                      'type': 'unsigned32'            },
     90: { 'name': 'mplsVpnRouteDistinguisher',             'type': 'octetArray'            },
     91: { 'name': 'mplsTopLabelPrefixLength',              'type': 'unsigned8',  'minValue': 0, 'maxValue': 32 },
     92: { 'name': 'srcTrafficIndex',                       'type': 'unsigned32'            },
     93: { 'name': 'dstTrafficIndex',                       'type': 'unsigned32'            },
     94: { 'name': 'applicationDescription',                'type': 'string'                },
     95: { 'name': 'applicationId',                         'type': 'octetArray'            },
     96: { 'name': 'applicationName',                       'type': 'string'                },
     98: { 'name': 'postIpDiffServCodePoint',               'type': 'unsigned8',  'minValue': 0, 'maxValue': 63 },
     99: { 'name': 'multicastReplicationFactor',            'type': 'unsigned32'            },
    101: { 'name': 'classificationEngineId',                'type': 'unsigned8'             },
    128: { 'name': 'bgpNextAdjacentAsNumber',               'type': 'unsigned32'            },
    129: { 'name': 'bgpPrevAdjacentAsNumber',               'type': 'unsigned32'            },
    130: { 'name': 'exporterIPv4Address',                   'type': 'ipv4Address'           },
    131: { 'name': 'exporterIPv6Address',                   'type': 'ipv6Address'           },
    132: { 'name': 'droppedOctetDeltaCount',                'type': 'unsigned64'            },
    133: { 'name': 'droppedPacketDeltaCount',               'type': 'unsigned64'            },
    134: { 'name': 'droppedOctetTotalCount',                'type': 'unsigned64'            },
    135: { 'name': 'droppedPacketTotalCount',               'type': 'unsigned64'            },
    136: { 'name': 'flowEndReason',                         'type': 'unsigned8'             },
    137: { 'name': 'commonPropertiesId',                    'type': 'unsigned64'            },
    138: { 'name': 'observationPointId',                    'type': 'unsigned64'            },
    139: { 'name': 'icmpTypeCodeIPv6',                      'type': 'unsigned16'            },
    140: { 'name': 'mplsTopLabelIPv6Address',               'type': 'ipv6Address'           },
    141: { 'name': 'lineCardId',                            'type': 'unsigned32'            },
    142: { 'name': 'portId',                                'type': 'unsigned32'            },
    143: { 'name': 'meteringProcessId',                     'type': 'unsigned32'            },
    144: { 'name': 'exportingProcessId',                    'type': 'unsigned32'            },
    145: { 'name': 'templateId',                            'type': 'unsigned16'            },
    146: { 'name': 'wlanChannelId',                         'type': 'unsigned8'             },
    147: { 'name': 'wlanSSID',                              'type': 'string'                },
    148: { 'name': 'flowId',                                'type': 'unsigned64'            },
    149: { 'name': 'observationDomainId',                   'type': 'unsigned32'            },
    150: { 'name': 'flowStartSeconds',                      'type': 'dateTimeSeconds'       },
    151: { 'name': 'flowEndSeconds',                        'type': 'dateTimeSeconds'       },
    152: { 'name': 'flowStartMilliseconds',                 'type': 'dateTimeMilliseconds'  },
    153: { 'name': 'flowEndMilliseconds',                   'type': 'dateTimeMilliseconds'  },
    154: { 'name': 'flowStartMicroseconds',                 'type': 'dateTimeMicroseconds'  },
    155: { 'name': 'flowEndMicroseconds',                   'type': 'dateTimeMicroseconds'  },
    156: { 'name': 'flowStartNanoseconds',                  'type': 'dateTimeNanoseconds'   },
    157: { 'name': 'flowEndNanoseconds',                    'type': 'dateTimeNanoseconds'   },
    158: { 'name': 'flowStartDeltaMicroseconds',            'type': 'unsigned32'            },
    159: { 'name': 'flowEndDeltaMicroseconds',              'type': 'unsigned32'            },
    160: { 'name': 'systemInitTimeMilliseconds',            'type': 'dateTimeMilliseconds'  },
    161: { 'name': 'flowDurationMilliseconds',              'type': 'unsigned32'            },
    162: { 'name': 'flowDurationMicroseconds',              'type': 'unsigned32'            },
    163: { 'name': 'observedFlowTotalCount',                'type': 'unsigned64'            },
    164: { 'name': 'ignoredPacketTotalCount',               'type': 'unsigned64'            },
    165: { 'name': 'ignoredOctetTotalCount',                'type': 'unsigned64'            },
    166: { 'name': 'notSentFlowTotalCount',                 'type': 'unsigned64'            },
    167: { 'name': 'notSentPacketTotalCount',               'type': 'unsigned64'            },
    168: { 'name': 'notSentOctetTotalCount',                'type': 'unsigned64'            },
    169: { 'name': 'destinationIPv6Prefix',                 'type': 'ipv6Address'           },
    170: { 'name': 'sourceIPv6Prefix',                      'type': 'ipv6Address'           },
    171: { 'name': 'postOctetTotalCount',                   'type': 'unsigned64'            },
    172: { 'name': 'postPacketTotalCount',                  'type': 'unsigned64'            },
    173: { 'name': 'flowKeyIndicator',                      'type': 'unsigned64'            },
    174: { 'name': 'postMCastPacketTotalCount',             'type': 'unsigned64'            },
    175: { 'name': 'postMCastOctetTotalCount',              'type': 'unsigned64'            },
    176: { 'name': 'icmpTypeIPv4',                          'type': 'unsigned8'             },
    177: { 'name': 'icmpCodeIPv4',                          'type': 'unsigned8'             },
    178: { 'name': 'icmpTypeIPv6',                          'type': 'unsigned8'             },
    179: { 'name': 'icmpCodeIPv6',                          'type': 'unsigned8'             },
    180: { 'name': 'udpSourcePort',                         'type': 'unsigned16'            },
    181: { 'name': 'udpDestinationPort',                    'type': 'unsigned16'            },
    182: { 'name': 'tcpSourcePort',                         'type': 'unsigned16'            },
    183: { 'name': 'tcpDestinationPort',                    'type': 'unsigned16'            },
    184: { 'name': 'tcpSequenceNumber',                     'type': 'unsigned32'            },
    185: { 'name': 'tcpAcknowledgementNumber',              'type': 'unsigned32'            },
    186: { 'name': 'tcpWindowSize',                         'type': 'unsigned16'            },
    187: { 'name': 'tcpUrgentPointer',                      'type': 'unsigned16'            },
    188: { 'name': 'tcpHeaderLength',                       'type': 'unsigned8'             },
    189: { 'name': 'ipHeaderLength',                        'type': 'unsigned8'             },
    190: { 'name': 'totalLengthIPv4',                       'type': 'unsigned16'            },
    191: { 'name': 'payloadLengthIPv6',                     'type': 'unsigned16'            },
    192: { 'name': 'ipTTL',                                 'type': 'unsigned8'             },
    193: { 'name': 'nextHeaderIPv6',                        'type': 'unsigned8'             },
    194: { 'name': 'mplsPayloadLength',                     'type': 'unsigned32'            },
    195: { 'name': 'ipDiffServCodePoint',                   'type': 'unsigned8',  'minValue': 0, 'maxValue': 63 },
    196: { 'name': 'ipPrecedence',                          'type': 'unsigned8',  'minValue': 0, 'maxValue': 7 },
    197: { 'name': 'fragmentFlags',                         'type': 'unsigned8'             },
    198: { 'name': 'octetDeltaSumOfSquares',                'type': 'unsigned64'            },
    199: { 'name': 'octetTotalSumOfSquares',                'type': 'unsigned64'            },
    200: { 'name': 'mplsTopLabelTTL',                       'type': 'unsigned8'             },
    201: { 'name': 'mplsLabelStackLength',                  'type': 'unsigned32'            },
    202: { 'name': 'mplsLabelStackDepth',                   'type': 'unsigned32'            },
    203: { 'name': 'mplsTopLabelExp',                       'type': 'unsigned8'             },
    204: { 'name': 'ipPayloadLength',                       'type': 'unsigned32'            },
    205: { 'name': 'udpMessageLength',                      'type': 'unsigned16'            },
    206: { 'name': 'isMulticast',                           'type': 'unsigned8'             },
    207: { 'name': 'ipv4IHL',                               'type': 'unsigned8'             },
    208: { 'name': 'ipv4Options',                           'type': 'unsigned32'            },
    209: { 'name': 'tcpOptions',                            'type': 'unsigned64'            },
    210: { 'name': 'paddingOctets',                         'type': 'octetArray'            },
    211: { 'name': 'collectorIPv4Address',                  'type': 'ipv4Address'           },
    212: { 'name': 'collectorIPv6Address',                  'type': 'ipv6Address'           },
    213: { 'name': 'exportInterface',                       'type': 'unsigned32'            },
    214: { 'name': 'exportProtocolVersion',                 'type': 'unsigned8'             },
    215: { 'name': 'exportTransportProtocol',               'type': 'unsigned8'             },
    216: { 'name': 'collectorTransportPort',                'type': 'unsigned16'            },
    217: { 'name': 'exporterTransportPort',                 'type': 'unsigned16'            },
    218: { 'name': 'tcpSynTotalCount',                      'type': 'unsigned64'            },
    219: { 'name': 'tcpFinTotalCount',                      'type': 'unsigned64'            },
    220: { 'name': 'tcpRstTotalCount',                      'type': 'unsigned64'            },
    221: { 'name': 'tcpPshTotalCount',                      'type': 'unsigned64'            },
    222: { 'name': 'tcpAckTotalCount',                      'type': 'unsigned64'            },
    223: { 'name': 'tcpUrgTotalCount',                      'type': 'unsigned64'            },
    224: { 'name': 'ipTotalLength',                         'type': 'unsigned64'            },
    225: { 'name': 'postNATSourceIPv4Address',              'type': 'ipv4Address'           },
    226: { 'name': 'postNATDestinationIPv4Address',         'type': 'ipv4Address'           },
    227: { 'name': 'postNAPTSourceTransportPort',           'type': 'unsigned16'            },
    228: { 'name': 'postNAPTDestinationTransportPort',      'type': 'unsigned16'            },
    229: { 'name': 'natOriginatingAddressRealm',            'type': 'unsigned8',  'minValue': 1, 'maxValue': 2 },
    230: { 'name': 'natEvent',                              'type': 'unsigned8',  'minValue': 1, 'maxValue': 2 },
    231: { 'name': 'initiatorOctets',                       'type': 'unsigned64'            },
    232: { 'name': 'responderOctets',                       'type': 'unsigned64'            },
    233: { 'name': 'firewallEvent',                         'type': 'unsigned8'             },
    234: { 'name': 'ingressVRFID',                          'type': 'unsigned32'            },
    235: { 'name': 'egressVRFID',                           'type': 'unsigned32'            },
    236: { 'name': 'VRFname',                               'type': 'string'                },
    237: { 'name': 'postMplsTopLabelExp',                   'type': 'unsigned8'             },
    238: { 'name': 'tcpWindowScale',                        'type': 'unsigned16'            },
    239: { 'name': 'biflowDirection',                       'type': 'unsigned8'             },
    240: { 'name': 'ethernetHeaderLength',                  'type': 'unsigned8'             },
    241: { 'name': 'ethernetPayloadLength',                 'type': 'unsigned16'            },
    242: { 'name': 'ethernetTotalLength',                   'type': 'unsigned16'            },
    243: { 'name': 'dot1qVlanId',                           'type': 'unsigned16'            },
    244: { 'name': 'dot1qPriority',                         'type': 'unsigned8'             },
    245: { 'name': 'dot1qCustomerVlanId',                   'type': 'unsigned16'            },
    246: { 'name': 'dot1qCustomerPriority',                 'type': 'unsigned8'             },
    247: { 'name': 'metroEvcId',                            'type': 'string'                },
    248: { 'name': 'metroEvcType',                          'type': 'unsigned8'             },
    249: { 'name': 'pseudoWireId',                          'type': 'unsigned32'            },
    250: { 'name': 'pseudoWireType',                        'type': 'unsigned16'            },
    251: { 'name': 'pseudoWireControlWord',                 'type': 'unsigned32'            },
    252: { 'name': 'ingressPhysicalInterface',              'type': 'unsigned32'            },
    253: { 'name': 'egressPhysicalInterface',               'type': 'unsigned32'            },
    254: { 'name': 'postDot1qVlanId',                       'type': 'unsigned16'            },
    255: { 'name': 'postDot1qCustomerVlanId',               'type': 'unsigned16'            },
    256: { 'name': 'ethernetType',                          'type': 'unsigned16'            },
    257: { 'name': 'postIpPrecedence',                      'type': 'unsigned8', 'minValue': 0, 'maxValue': 7 },
    258: { 'name': 'collectionTimeMilliseconds',            'type': 'dateTimeMilliseconds'  },
    259: { 'name': 'exportSctpStreamId',                    'type': 'unsigned16'            },
    260: { 'name': 'maxExportSeconds',                      'type': 'dateTimeSeconds'       },
    261: { 'name': 'maxFlowEndSeconds',                     'type': 'dateTimeSeconds'       },
    262: { 'name': 'messageMD5Checksum',                    'type': 'octetArray'            },
    263: { 'name': 'messageScope',                          'type': 'unsigned8', 'minValue': 0, 'maxValue': 0 },
    264: { 'name': 'minExportSeconds',                      'type': 'dateTimeSeconds'       },
    265: { 'name': 'minFlowStartSeconds',                   'type': 'dateTimeSeconds'       },
    266: { 'name': 'opaqueOctets',                          'type': 'octetArray'            },
    267: { 'name': 'sessionScope',                          'type': 'unsigned8', 'minValue': 0, 'maxValue': 0 },
    268: { 'name': 'maxFlowEndMicroseconds',                'type': 'dateTimeMicroseconds'  },
    269: { 'name': 'maxFlowEndMilliseconds',                'type': 'dateTimeMilliseconds'  },
    270: { 'name': 'maxFlowEndNanoseconds',                 'type': 'dateTimeNanoseconds'   },
    271: { 'name': 'minFlowStartMicroseconds',              'type': 'dateTimeMicroseconds'  },
    272: { 'name': 'minFlowStartMilliseconds',              'type': 'dateTimeMilliseconds'  },
    273: { 'name': 'minFlowStartNanoseconds',               'type': 'dateTimeNanoseconds'   },
    274: { 'name': 'collectorCertificate',                  'type': 'octetArray'            },
    275: { 'name': 'exporterCertificate',                   'type': 'octetArray'            },
    276: { 'name': 'dataRecordsReliability',                'type': 'boolean'               },
    277: { 'name': 'observationPointType',                  'type': 'unsigned8'             },
    278: { 'name': 'newConnectionDeltaCount',               'type': 'unsigned32'            },
    279: { 'name': 'connectionSumDurationSeconds',          'type': 'unsigned64'            },
    280: { 'name': 'connectionTransactionId',               'type': 'unsigned64'            },
    281: { 'name': 'postNATSourceIPv6Address',              'type': 'ipv6Address'           },
    282: { 'name': 'postNATDestinationIPv6Address',         'type': 'ipv6Address'           },
    283: { 'name': 'natPoolId',                             'type': 'unsigned32'            },
    284: { 'name': 'natPoolName',                           'type': 'string'                },
    285: { 'name': 'anonymizationFlags',                    'type': 'unsigned16'            },
    286: { 'name': 'anonymizationTechnique',                'type': 'unsigned16'            },
    287: { 'name': 'informationElementIndex',               'type': 'unsigned16'            },
    288: { 'name': 'p2pTechnology',                         'type': 'string'                },
    289: { 'name': 'tunnelTechnology',                      'type': 'string'                },
    290: { 'name': 'encryptedTechnology',                   'type': 'string'                },
    291: { 'name': 'basicList',                             'type': 'basicList'             },
    292: { 'name': 'subTemplateList',                       'type': 'subTemplateList'       },
    293: { 'name': 'subTemplateMultiList',                  'type': 'subTemplateMultiList'  },
    294: { 'name': 'bgpValidityState',                      'type': 'unsigned8'             },
    295: { 'name': 'IPSecSPI',                              'type': 'unsigned32'            },
    296: { 'name': 'greKey',                                'type': 'unsigned32'            },
    297: { 'name': 'natType',                               'type': 'unsigned8'             },
    298: { 'name': 'initiatorPackets',                      'type': 'unsigned64'            },
    299: { 'name': 'responderPackets',                      'type': 'unsigned64'            },
    300: { 'name': 'observationDomainName',                 'type': 'string'                },
    301: { 'name': 'selectionSequenceId',                   'type': 'unsigned64'            },
    302: { 'name': 'selectorId',                            'type': 'unsigned64'            },
    303: { 'name': 'informationElementId',                  'type': 'unsigned16'            },
    304: { 'name': 'selectorAlgorithm',                     'type': 'unsigned16'            },
    305: { 'name': 'samplingPacketInterval',                'type': 'unsigned32'            },
    306: { 'name': 'samplingPacketSpace',                   'type': 'unsigned32'            },
    307: { 'name': 'samplingTimeInterval',                  'type': 'unsigned32'            },
    308: { 'name': 'samplingTimeSpace',                     'type': 'unsigned32'            },
    309: { 'name': 'samplingSize',                          'type': 'unsigned32'            },
    310: { 'name': 'samplingPopulation',                    'type': 'unsigned32'            },
    311: { 'name': 'samplingProbability',                   'type': 'float64'               },
    312: { 'name': 'dataLinkFrameSize',                     'type': 'unsigned16'            },
    313: { 'name': 'ipHeaderPacketSection',                 'type': 'octetArray'            },
    314: { 'name': 'ipPayloadPacketSection',                'type': 'octetArray'            },
    315: { 'name': 'dataLinkFrameSection',                  'type': 'octetArray'            },
    316: { 'name': 'mplsLabelStackSection',                 'type': 'octetArray'            },
    317: { 'name': 'mplsPayloadPacketSection',              'type': 'octetArray'            },
    318: { 'name': 'selectorIdTotalPktsObserved',           'type': 'unsigned64'            },
    319: { 'name': 'selectorIdTotalPktsSelected',           'type': 'unsigned64'            },
    320: { 'name': 'absoluteError',                         'type': 'float64'               },
    321: { 'name': 'relativeError',                         'type': 'float64'               },
    322: { 'name': 'observationTimeSeconds',                'type': 'dateTimeSeconds'       },
    323: { 'name': 'observationTimeMilliseconds',           'type': 'dateTimeMilliseconds'  },
    324: { 'name': 'observationTimeMicroseconds',           'type': 'dateTimeMicroseconds'  },
    325: { 'name': 'observationTimeNanoseconds',            'type': 'dateTimeNanoseconds'   },
    326: { 'name': 'digestHashValue',                       'type': 'unsigned64'            },
    327: { 'name': 'hashIPPayloadOffset',                   'type': 'unsigned64'            },
    328: { 'name': 'hashIPPayloadSize',                     'type': 'unsigned64'            },
    329: { 'name': 'hashOutputRangeMin',                    'type': 'unsigned64'            },
    330: { 'name': 'hashOutputRangeMax',                    'type': 'unsigned64'            },
    331: { 'name': 'hashSelectedRangeMin',                  'type': 'unsigned64'            },
    332: { 'name': 'hashSelectedRangeMax',                  'type': 'unsigned64'            },
    333: { 'name': 'hashDigestOutput',                      'type': 'boolean'               },
    334: { 'name': 'hashInitialiserValue',                  'type': 'unsigned64'            },
    335: { 'name': 'selectorName',                          'type': 'string'                },
    336: { 'name': 'upperCILimit',                          'type': 'float64'               },
    337: { 'name': 'lowerCILimit',                          'type': 'float64'               },
    338: { 'name': 'confidenceLevel',                       'type': 'float64'               },
    339: { 'name': 'informationElementDataType',            'type': 'unsigned8'             },
    340: { 'name': 'informationElementDescription',         'type': 'string'                },
    341: { 'name': 'informationElementName',                'type': 'string'                },
    342: { 'name': 'informationElementRangeBegin',          'type': 'unsigned64'            },
    343: { 'name': 'informationElementRangeEnd',            'type': 'unsigned64'            },
    344: { 'name': 'informationElementSemantics',           'type': 'unsigned8'             },
    345: { 'name': 'informationElementUnits',               'type': 'unsigned16'            },
    346: { 'name': 'privateEnterpriseNumber',               'type': 'unsigned32'            },
    347: { 'name': 'virtualStationInterfaceId',             'type': 'octetArray'            },
    348: { 'name': 'virtualStationInterfaceName',           'type': 'string'                },
    349: { 'name': 'virtualStationUUID',                    'type': 'octetArray'            },
    350: { 'name': 'virtualStationName',                    'type': 'string'                },
    351: { 'name': 'layer2SegmentId',                       'type': 'unsigned64'            },
    352: { 'name': 'layer2OctetDeltaCount',                 'type': 'unsigned64'            },
    353: { 'name': 'layer2OctetTotalCount',                 'type': 'unsigned64'            },
    354: { 'name': 'ingressUnicastPacketTotalCount',        'type': 'unsigned64'            },
    355: { 'name': 'ingressMulticastPacketTotalCount',      'type': 'unsigned64'            },
    356: { 'name': 'ingressBroadcastPacketTotalCount',      'type': 'unsigned64'            },
    357: { 'name': 'egressUnicastPacketTotalCount',         'type': 'unsigned64'            },
    358: { 'name': 'egressBroadcastPacketTotalCount',       'type': 'unsigned64'            },
    359: { 'name': 'monitoringIntervalStartMilliSeconds',   'type': 'dateTimeMilliseconds'  },
    360: { 'name': 'monitoringIntervalEndMilliSeconds',     'type': 'dateTimeMilliseconds'  },
    361: { 'name': 'portRangeStart',                        'type': 'unsigned16'            },
    362: { 'name': 'portRangeEnd',                          'type': 'unsigned16'            },
    363: { 'name': 'portRangeStepSize',                     'type': 'unsigned16'            },
    364: { 'name': 'portRangeNumPorts',                     'type': 'unsigned16'            },
    365: { 'name': 'staMacAddress',                         'type': 'macAddress'            },
    366: { 'name': 'staIPv4Address',                        'type': 'ipv4Address'           },
    367: { 'name': 'wtpMacAddress',                         'type': 'macAddress'            },
    368: { 'name': 'ingressInterfaceType',                  'type': 'unsigned32'            },
    369: { 'name': 'egressInterfaceType',                   'type': 'unsigned32'            },
    370: { 'name': 'rtpSequenceNumber',                     'type': 'unsigned16'            },
    371: { 'name': 'userName',                              'type': 'string'                },
    372: { 'name': 'applicationCategoryName',               'type': 'string'                },
    373: { 'name': 'applicationSubCategoryName',            'type': 'string'                },
    374: { 'name': 'applicationGroupName',                  'type': 'string'                },
    375: { 'name': 'originalFlowsPresent',                  'type': 'unsigned64'            },
    376: { 'name': 'originalFlowsInitiated',                'type': 'unsigned64'            },
    377: { 'name': 'originalFlowsCompleted',                'type': 'unsigned64'            },
    378: { 'name': 'distinctCountOfSourceIPAddress',        'type': 'unsigned64'            },
    379: { 'name': 'distinctCountOfDestinationIPAddress',   'type': 'unsigned64'            },
    380: { 'name': 'distinctCountOfSourceIPv4Address',      'type': 'unsigned32'            },
    381: { 'name': 'distinctCountOfDestinationIPv4Address', 'type': 'unsigned32'            },
    382: { 'name': 'distinctCountOfSourceIPv6Address',      'type': 'unsigned64'            },
    383: { 'name': 'distinctCountOfDestinationIPv6Address', 'type': 'unsigned64'            },
    384: { 'name': 'valueDistributionMethod',               'type': 'unsigned8'             },
    385: { 'name': 'rfc3550JitterMilliseconds',             'type': 'unsigned32'            },
    386: { 'name': 'rfc3550JitterMicroseconds',             'type': 'unsigned32'            },
    387: { 'name': 'rfc3550JitterNanoseconds',              'type': 'unsigned32'            },
    388: { 'name': 'dot1qDEI',                              'type': 'boolean'               },
    389: { 'name': 'dot1qCustomerDEI',                      'type': 'boolean'               },
    390: { 'name': 'flowSelectorAlgorithm',                 'type': 'unsigned16'            },
    391: { 'name': 'flowSelectedOctetDeltaCount',           'type': 'unsigned64'            },
    392: { 'name': 'flowSelectedPacketDeltaCount',          'type': 'unsigned64'            },
    393: { 'name': 'flowSelectedFlowDeltaCount',            'type': 'unsigned64'            },
    394: { 'name': 'selectorIDTotalFlowsObserved',          'type': 'unsigned64'            },
    395: { 'name': 'selectorIDTotalFlowsSelected',          'type': 'unsigned64'            },
    396: { 'name': 'samplingFlowInterval',                  'type': 'unsigned64'            },
    397: { 'name': 'samplingFlowSpacing',                   'type': 'unsigned64'            },
    398: { 'name': 'flowSamplingTimeInterval',              'type': 'unsigned64'            },
    399: { 'name': 'flowSamplingTimeSpacing',               'type': 'unsigned64'            },
    400: { 'name': 'hashFlowDomain',                        'type': 'unsigned16'            },
    401: { 'name': 'transportOctetDeltaCount',              'type': 'unsigned64'            },
    402: { 'name': 'transportPacketDeltaCount',             'type': 'unsigned64'            },
    403: { 'name': 'originalExporterIPv4Address',           'type': 'ipv4Address'           },
    404: { 'name': 'originalExporterIPv6Address',           'type': 'ipv6Address'           },
    405: { 'name': 'originalObservationDomainId',           'type': 'unsigned32'            },
    406: { 'name': 'intermediateProcessId',                 'type': 'unsigned32'            },
    407: { 'name': 'ignoredDataRecordTotalCount',           'type': 'unsigned64'            },
    408: { 'name': 'dataLinkFrameType',                     'type': 'unsigned16'            },
    409: { 'name': 'sectionOffset',                         'type': 'unsigned16'            },
    410: { 'name': 'sectionExportedOctets',                 'type': 'unsigned16'            },
    411: { 'name': 'dot1qServiceInstanceTag',               'type': 'octetArray'            },
    412: { 'name': 'dot1qServiceInstanceId',                'type': 'unsigned32', 'minValue': 0, 'maxValue': 16777215 },
    413: { 'name': 'dot1qServiceInstancePriority',          'type': 'unsigned8',  'minValue': 0, 'maxValue': 7 },
    414: { 'name': 'dot1qCustomerSourceMacAddress',         'type': 'macAddress'            },
    415: { 'name': 'dot1qCustomerDestinationMacAddress',    'type': 'macAddress'            },
    417: { 'name': 'postLayer2OctetDeltaCount',             'type': 'unsigned64'            },
    418: { 'name': 'postMCastLayer2OctetDeltaCount',        'type': 'unsigned64'            },
    420: { 'name': 'postLayer2OctetTotalCount',             'type': 'unsigned64'            },
    421: { 'name': 'postMCastLayer2OctetTotalCount',        'type': 'unsigned64'            },
    422: { 'name': 'minimumLayer2TotalLength',              'type': 'unsigned64'            },
    423: { 'name': 'maximumLayer2TotalLength',              'type': 'unsigned64'            },
    424: { 'name': 'droppedLayer2OctetDeltaCount',          'type': 'unsigned64'            },
    425: { 'name': 'droppedLayer2OctetTotalCount',          'type': 'unsigned64'            },
    426: { 'name': 'ignoredLayer2OctetTotalCount',          'type': 'unsigned64'            },
    427: { 'name': 'notSentLayer2OctetTotalCount',          'type': 'unsigned64'            },
    428: { 'name': 'layer2OctetDeltaSumOfSquares',          'type': 'unsigned64'            },
    429: { 'name': 'layer2OctetTotalSumOfSquares',          'type': 'unsigned64'            },
    430: { 'name': 'layer2FrameDeltaCount',                 'type': 'unsigned64'            },
    431: { 'name': 'layer2FrameTotalCount',                 'type': 'unsigned64'            },
    432: { 'name': 'pseudoWireDestinationIPv4Address',      'type': 'ipv4Address'           },
    433: { 'name': 'ignoredLayer2FrameTotalCount',          'type': 'unsigned64'            },
    434: { 'name': 'mibObjectValueInteger',                 'type': 'signed64'              },
    435: { 'name': 'mibObjectValueOctetString',             'type': 'octetArray'            },
    436: { 'name': 'mibObjectValueOID',                     'type': 'octetArray'            },
    437: { 'name': 'mibObjectValueBits',                    'type': 'octetArray'            },
    438: { 'name': 'mibObjectValueIPAddress',               'type': 'ipv4Address'           },
    439: { 'name': 'mibObjectValueCounter',                 'type': 'unsigned64'            },
    440: { 'name': 'mibObjectValueGauge',                   'type': 'unsigned32'            },
    441: { 'name': 'mibObjectValueTimeTicks',               'type': 'unsigned32'            },
    442: { 'name': 'mibObjectValueUnsigned',                'type': 'unsigned64'            },
    443: { 'name': 'mibObjectValueTable',                   'type': 'subTemplateList'       },
    444: { 'name': 'mibObjectValueRow',                     'type': 'subTemplateList'       },
    445: { 'name': 'mibObjectIdentifier',                   'type': 'octetArray'            },
    446: { 'name': 'mibSubIdentifier',                      'type': 'unsigned32'            },
    447: { 'name': 'mibIndexIndicator',                     'type': 'unsigned64'            },
    448: { 'name': 'mibCaptureTimeSemantics',               'type': 'unsigned8'             },
    449: { 'name': 'mibContextEngineID',                    'type': 'octetArray'            },
    450: { 'name': 'mibContextName',                        'type': 'string'                },
    451: { 'name': 'mibObjectName',                         'type': 'string'                },
    452: { 'name': 'mibObjectDescription',                  'type': 'string'                },
    453: { 'name': 'mibObjectSyntax',                       'type': 'string'                },
    454: { 'name': 'mibModuleName',                         'type': 'string'                },
    455: { 'name': 'mobileIMSI',                            'type': 'string'                },
    456: { 'name': 'mobileMSISDN',                          'type': 'string'                },
    457: { 'name': 'httpStatusCode',                        'type': 'unsigned16', 'minValue': 0, 'maxValue': 999 },
}

PEN_UAM = 5778
PEN_VMWARE = 6876
PEN_UPC = 25785

pen = {
    # ...
    PEN_UAM: 'Universidad Autonoma de Madrid (UAM)',
    # ...
    PEN_VMWARE: 'VMware Inc.',
    # ...
    PEN_UPC: 'Universitat Politecnica de Catalunya (UPC)',
    # ...
}

pen_alias = {
    'IANA': -1, # None is reserved for non-existing alias
    'UAM': PEN_UAM,
    'VMWARE': PEN_VMWARE,
    'UPC': PEN_UPC,
}

ie_pen = {
     PEN_UAM: {
        2000: {'name': 'etherStatsOversizePkts',                     'type': 'unsigned32'  },
        2001: {'name': 'etherStatsFragments',                         'type': 'unsigned32'  },
        2002: {'name': 'etherStatsJabbers',                           'type': 'unsigned32'  },
        2003: {'name': 'etherStatsCollisions',                        'type': 'unsigned32'  },
        2004: {'name': 'etherStatsPkts64Octets',                      'type': 'unsigned32'  },
        2005: {'name': 'etherStatsPkts65to127Octets',                 'type': 'unsigned32'  },
        2006: {'name': 'etherStatsPkts128to255Octets',                'type': 'unsigned32'  },
        2007: {'name': 'etherStatsPkts256to511Octets',                'type': 'unsigned32'  },
        2008: {'name': 'etherStatsPkts512to1023Octets',               'type': 'unsigned32'  },
        2009: {'name': 'etherStatsPkts1024to1518Octets',              'type': 'unsigned32'  },
        2012: {'name': 'etherStatsStatus',                            'type': 'unsigned32'  },
        2013: {'name': 'etherStatsDropEvents',                        'type': 'unsigned32'  },
        2014: {'name': 'etherStatsOctets',                            'type': 'unsigned32'  },
        2015: {'name': 'etherStatsPkts',                              'type': 'unsigned32'  },
        2016: {'name': 'etherStatsBroadcastPkts',                     'type': 'unsigned32'  },
        2017: {'name': 'etherStatsMulticastPkts',                     'type': 'unsigned32'  },
        2018: {'name': 'etherStatsCRCAlignErrors',                    'type': 'unsigned32'  },
        2019: {'name': 'etherStatsUndersizePkts',                     'type': 'unsigned32'  },
        2021: {'name': 'agentDRAMutilizationTotalDRAM',             'type': 'unsigned32'  },
        2022: {'name': 'agentDRAMutilizationUsedDRAM',              'type': 'unsigned32'  },
        2023: {'name': 'agentDRAMutilization',                      'type': 'unsigned32'  },
        2024: {'name': 'agentCPUutilizationIn5sec',                 'type': 'unsigned32'  },
        2025: {'name': 'agentCPUutilizationIn1min',                 'type': 'unsigned32'  },
        2026: {'name': 'agentCPUutilizationIn5min',                 'type': 'unsigned32'  },
        2027: {'name': 'agentFLASHutilizationTotalFLASH',           'type': 'unsigned32'  },
        2028: {'name': 'agentFLASHutilizationUsedFLASH',            'type': 'unsigned32'  },
        2029: {'name': 'agentFLASHutilization',                     'type': 'unsigned32'  },
        2030: {'name': 'ifIndex',                                   'type': 'unsigned32'  },
        2031: {'name': 'ifDescr',                                   'type': 'string'  },
        2032: {'name': 'ifType',                                    'type': 'string'  },
        2033: {'name': 'ifMtu',                                     'type': 'unsigned32'  },
        2034: {'name': 'ifSpeed',                                   'type': 'unsigned32'  },
        2035: {'name': 'ifPhysAddress',                             'type': 'macAddress'  },
        2036: {'name': 'ifAdminStatus',                             'type': 'string'  },
        2037: {'name': 'ifOperStatus',                              'type': 'string'  },
        2038: {'name': 'ifLastChange',                              'type': 'string'  },
        2039: {'name': 'ifInOctets',                                'type': 'unsigned32'  },
        2040: {'name': 'ifInUcastPkts',                             'type': 'unsigned32'  },
        2041: {'name': 'ifInNUcastPkts',                            'type': 'unsigned32'  },
        2042: {'name': 'ifInDiscards',                              'type': 'unsigned32'  },
        2043: {'name': 'ifInErrors',                                'type': 'unsigned32'  },
        2044: {'name': 'ifInUnknownProtos',                         'type': 'unsigned32'  },
        2045: {'name': 'ifOutOctets',                               'type': 'unsigned32'  },
        2046: {'name': 'ifOutUcastPkts',                            'type': 'unsigned32'  },
        2047: {'name': 'ifOutNUcastPkts',                           'type': 'unsigned32'  },
        2048: {'name': 'ifOutDiscards',                             'type': 'unsigned32'  },
        2049: {'name': 'ifOutErrors',                               'type': 'unsigned32'  },
        2050: {'name': 'ifOutQLen',                                 'type': 'unsigned32'  },
        2051: {'name': 'ifSpecific',                                'type': 'string'  },
     },
     PEN_VMWARE: {
        891:  { 'name': 'tunnelType',                            'type': 'unsigned8', 'choose': [0x01, 0x02, 0x03, 0x05, 0x07] }, # [ VxLAN, GRE, LISP, IPsec+GRE, GENEVE ]
        892:  { 'name': 'tunnelKey',                             'type': 'octetArray'           },
        893:  { 'name': 'tunnelSourceIPv4Address',               'type': 'unsigned32'           },
        894:  { 'name': 'tunnelDestinationIPv4Address',          'type': 'unsigned32'           },
        895:  { 'name': 'tunnelProtocolIdentifier',              'type': 'unsigned8'            },
        896:  { 'name': 'tunnelSourceTransportPort',             'type': 'unsigned16'           },
        897:  { 'name': 'tunnelDestinationTransportPort',        'type': 'unsigned16'           },
    },
    PEN_UPC: {
        1000: { 'name': 'symbolicName',                          'type': 'string'               },
        1001: { 'name': 'applicationId',                         'type': 'unsigned32'           },
        1002: { 'name': 'layer2BitDeltaCount',                   'type': 'unsigned64'           },
        1003: { 'name': 'ber',                                   'type': 'float64'              },
        1004: { 'name': 'rxPowerMilliwatts',                     'type': 'float64'              },
        1005: { 'name': 'txPowerMilliwatts',                     'type': 'float64'              },
        1006: { 'name': 'direction',                             'type': 'unsigned8', 'choose': [0x00, 0x01, 0x02] }, # [ 'ingress', 'egress', 'bidirectional' ]
        1007: { 'name': 'observationGroupId',                    'type': 'unsigned64'           },
        1008: { 'name': 'rxPowerDecibelMilliwatts',              'type': 'float64'              },
        1009: { 'name': 'txPowerDecibelMilliwatts',              'type': 'float64'              },
        1010: { 'name': 'encryptedSymmetricKey',                 'type': 'octetArray'           },
        1011: { 'name': 'encryptedData',                         'type': 'octetArray'           },
        1012: { 'name': 'symmetricKeyId',                        'type': 'unsigned32'           },
        1013: { 'name': 'originalTemplateId',                    'type': 'unsigned16'           },
        1014: { 'name': 'frequencyGigaHertz',                    'type': 'float64'              },
        
        # current and total number of pages (or blocks) in the subTemplateList
        # value of stlPaginationIndex is in range 0..(stlPaginationTotal-1)
        1015: { 'name': 'stlPaginationIndex',                    'type': 'unsigned16', 'minValue': 0 },
        1016: { 'name': 'stlPaginationTotal',                    'type': 'unsigned16', 'minValue': 1 },

        9008: { 'name': 'rxPowerDecibelMilliwattsInt',           'type': 'unsigned32'           },
        9014: { 'name': 'frequencyGigaHertzInt',                 'type': 'unsigned32'           },

        #1001: { 'name': 'layer2BitRatePerSecond',                'type': 'unsigned64'           },
        #1003: { 'name': 'jitterMilliseconds',                    'type': 'float64'              },
        #1004: { 'name': 'jitterMicroseconds',                    'type': 'float64'              },
        #1005: { 'name': 'jitterNanoseconds',                     'type': 'float64'              },
        #1006: { 'name': 'latencyMilliseconds',                   'type': 'float64'              },
        #1007: { 'name': 'latencyMicroseconds',                   'type': 'float64'              },
        #1008: { 'name': 'latencyNanoseconds',                    'type': 'float64'              },
        #1011: { 'name': 'rrhId',                                 'type': 'unsigned32'           },
    }
}

def getIANAFieldByName(ie_name):
    fields = filter(lambda (_,attr): attr['name'] == ie_name, ie_iana.iteritems())
    if(len(fields) == 0): raise Exception('Field(%s) not known' % ie_name)
    if(len(fields) > 1): raise Exception('Multiple matches for Field(%s)' % ie_name)
    return(fields[0])

def getIANAFieldById(ie_id):
    if(not ie_iana.has_key(ie_id)):
        raise Exception('Unknown IANA-IPFIX Information Element: %d' % (ie_id))
    return((ie_id, ie_iana[ie_id]))

def validatePEN(pen_):
    if(not pen.has_key(pen_)):
        raise Exception('Unknown Private Enterprise Number: %s' % str(pen_))

def getPENFieldByName(ie_name, pen_):
    if(not ie_pen.has_key(pen_)):
        raise Exception('Unknown Private Enterprise Number: %s' % str(pen_))
    entFields = ie_pen[pen_]
    fields = filter(lambda (_,attr): attr['name'] == ie_name, entFields.iteritems())
    if(len(fields) == 0): raise Exception('Field(%s) for PEN(%d) not known' % (ie_name, pen_))
    if(len(fields) > 1): raise Exception('Multiple matches for Field(%s) in PEN(%d)' % (ie_name, pen_))
    return(fields[0])

def getPENFieldById(ie_id, pen_):
    if(not ie_pen.has_key(pen_)):
        raise Exception('Unknown Private Enterprise Number: %s' % str(pen_))
    entFields = ie_pen[pen_]
    if(not entFields.has_key(ie_id)):
        raise Exception('Private Enterprise Number(%d) does not contain Information Element(%d)' % (pen_, ie_id))
    return((ie_id, entFields[ie_id]))

def getStructForType(ie_type, fieldName, length=None):
    if(not type_to_struct.has_key(ie_type)):
        raise Exception('Type(%s) does not exist. Used by field(%s)' % (ie_type, fieldName))
    _str = type_to_struct[ie_type]
    if(_str is None):
        raise Exception('Type(%s) is not defined. Used by field(%s)' % (ie_type, fieldName))
    if(isinstance(_str, (struct.Struct, TypeBasicList, TypeSubTemplateList))):
        return(_str)
    if(isinstance(_str, (dict,))):
        if(length is None):
            raise Exception('Non-static size entity(%s) requires a length' % (str(fieldName)))
        symbolFormat = _str['symbolFormat']
        _str = struct.Struct(symbolFormat * length)
        return(_str)
        
    raise Exception('Wrong or incomplete definition for entity(%s): %s' % (str(fieldName), str(_str)))

def getReducedType(ie_type, length):
    if(not reduced_types.has_key(ie_type)): return(ie_type)
    reduced_patterns_for_type = reduced_types[ie_type]
    if(not reduced_patterns_for_type.has_key(length)):
        raise Exception('Type(%s) cannot be reduced to length(%s)' % (ie_type, str(length)))
    reduced_type = reduced_patterns_for_type[length]
    return(reduced_type)
